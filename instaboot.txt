
create project
=============================================================================

create new spring initializr project
    group: org.mrpaulwoods
    artifact: instaboot
    type: gradle project
    language: groovy
    packagin: war
    java version: 1.8

	dependencies:
        core: security, devtools
        web: web
        template engines: thymeleaf
        sql: jpa, h2
        ops: Actuator

	check use auto-import


create hello world app
=============================================================================


create home.HomeController
=============================================================================

    package org.mrpaulwoods.instaboot.home

    import groovy.util.logging.Slf4j
    import org.springframework.stereotype.Controller
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.RequestMapping

    @Slf4j
    @Controller
    @RequestMapping
    class HomeController {

        @GetMapping
        String index() {
            "home/index"
        }
    }


create home/index.html
=============================================================================

    <!DOCTYPE html>

    <html   xmlns:layout="http://www.w3.org/1999/xhtml"
            xmlns="http://www.w3.org/1999/xhtml">

    <body>

        <h1>Hello World</h1>

    </body>

    </html>


run the hello world app
=============================================================================

security
    user = "user"
    password is displayed in the log file


instaboot model
=============================================================================

Post
    stores the text for the post

Image
    stores the blob for the image
    1 post has many images

Comment
    stores the text for the comment
    1 post has many comments




basic spring data
=============================================================================

	creating jpa entities and repositories



### create post.PostRepository


    package org.mrpaulwoods.instaboot.post

    import org.mrpaulwoods.instaboot.image.Image
    import org.mrpaulwoods.instaboot.security.user.User

    import javax.persistence.Column
    import javax.persistence.Entity
    import javax.persistence.GeneratedValue
    import javax.persistence.Id
    import javax.persistence.JoinColumn
    import javax.persistence.ManyToOne

    @Entity
    class Post implements Serializable {

        private static final long serialVersionUID = 0

        @GeneratedValue
        @Id
        Long id

        @ManyToOne
        @JoinColumn(name="user_id")
        User user

        @Column(length=2000)
        String text
    }




### create post.PostRepository

    package org.mrpaulwoods.instaboot.post

    import org.springframework.data.jpa.repository.JpaRepository

    interface PostRepository extends JpaRepository<Post, Long> {
    }



### create image.ImageRepository

    package org.mrpaulwoods.instaboot.image

    import org.mrpaulwoods.instaboot.post.Post
    import org.mrpaulwoods.instaboot.security.user.User

    import javax.persistence.Column
    import javax.persistence.Entity
    import javax.persistence.EnumType
    import javax.persistence.Enumerated
    import javax.persistence.GeneratedValue
    import javax.persistence.Id
    import javax.persistence.JoinColumn
    import javax.persistence.Lob
    import javax.persistence.ManyToOne

    @Entity
    class Image implements Serializable {

        private static final long serialVersionUID = 0

        @GeneratedValue
        @Id
        Long id

        @ManyToOne
        @JoinColumn(name="user_id")
        User user

        @ManyToOne
        @JoinColumn(name="post_id")
        Post post

        @Lob
        @Column(length = 4194304) // 4MB
        byte[] content

        @Column(length = 300)
        String name

        @Column(length = 200)
        String contentType

        @Enumerated(EnumType.STRING)
        @Column(length = 50)
        ImageType imageType
    }

### create post.ImageRepository


    package org.mrpaulwoods.instaboot.image

    import org.mrpaulwoods.instaboot.post.Post
    import org.springframework.data.jpa.repository.JpaRepository

    interface ImageRepository extends JpaRepository<Image, Long> {
        Image findByPostAndImageType(Post post, ImageType imageType)
    }


    create comment.Comment

    package org.mrpaulwoods.instaboot.comment

    import org.mrpaulwoods.instaboot.post.Post
    import org.mrpaulwoods.instaboot.security.user.User

    import javax.persistence.Column
    import javax.persistence.Entity
    import javax.persistence.GeneratedValue
    import javax.persistence.Id
    import javax.persistence.JoinColumn
    import javax.persistence.ManyToOne

    @Entity
    class Comment implements Serializable {

        private static final long serialVersionUID = 0

        @GeneratedValue
        @Id
        Long id

        @ManyToOne
        @JoinColumn(name="user_id")
        User user

        @ManyToOne
        @JoinColumn(name = "post_id")
        Post post

        @Column(length = 2000)
        String text
    }



### create comment.CommentRepository

    package org.mrpaulwoods.instaboot.comment

    import org.mrpaulwoods.instaboot.post.Post
    import org.springframework.data.jpa.repository.JpaRepository

    interface CommentRepository extends JpaRepository<Comment, Long> {
        List<Comment> findAllByPost(Post post)
    }



create services
=============================================================================

	services generally access one datasource.
	we follow this general pattern for method names:
        create
        read
        update
        delete
        list
        findByXyz
        findAllByXyz


=============================================================================
create the upload function

	access multiple services to perform a user's task


upload image
	create upload controller
	create upload.html
	create UploadForm
	    -why forms and not entities

	create upload action
	create uploadCreate action

	create post
	create image
		- refactor into UploadAction


### create upload.UploadForm

    package org.mrpaulwoods.instaboot.upload

    import groovy.transform.Canonical
    import org.springframework.web.multipart.MultipartFile

    import javax.validation.constraints.NotNull
    import javax.validation.constraints.Size

    @Canonical

    class UploadForm implements Serializable {

        private static final long serialVersionUID = 0

        MultipartFile content

        @NotNull
        @Size(min=1, max=2000)
        String text

        boolean hasContent() {
            !content.empty
        }

    }



### create upload.UploadController

    package org.mrpaulwoods.instaboot.upload

    import groovy.util.logging.Slf4j
    import org.mrpaulwoods.instaboot.action.UploadAction
    import org.mrpaulwoods.instaboot.image.ImageService
    import org.mrpaulwoods.instaboot.security.SecurityService
    import org.springframework.security.access.prepost.PreAuthorize
    import org.springframework.stereotype.Controller
    import org.springframework.ui.Model
    import org.springframework.validation.BindingResult
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.PostMapping
    import org.springframework.web.bind.annotation.RequestMapping

    import javax.validation.Valid

    @Slf4j
    @Controller
    @RequestMapping("/upload")
    class UploadController {

        private ImageService imageService
        private UploadAction uploadAction
        private SecurityService securityService

        UploadController(
                ImageService imageService,
                UploadAction uploadAction,
                SecurityService securityService
        ) {
            this.imageService = imageService
            this.uploadAction = uploadAction
            this.securityService = securityService
        }

        @GetMapping
        @PreAuthorize("hasRole(['ROLE_USER])")
        String index(final Model model) {
            model.addAttribute "uploadForm", new UploadForm()
            "upload/index"
        }

        @PostMapping("/create")
        @PreAuthorize("hasRole(['ROLE_USER])")
        String create(@Valid UploadForm uploadForm, BindingResult result) {
            if (result.hasErrors()) {
                "upload/index"
            } else if (!uploadForm.hasContent()) {
                "upload/index"
            } else {
                uploadAction.execute uploadForm, securityService.currentUser
                "redirect:/"
            }
        }

    }


### create action.UploadAction

    package org.mrpaulwoods.instaboot.action

    import groovy.util.logging.Slf4j
    import org.mrpaulwoods.instaboot.image.Image
    import org.mrpaulwoods.instaboot.image.ImageService
    import org.mrpaulwoods.instaboot.image.ImageType
    import org.mrpaulwoods.instaboot.post.Post
    import org.mrpaulwoods.instaboot.post.PostService
    import org.mrpaulwoods.instaboot.security.user.User
 //   import org.mrpaulwoods.instaboot.thumbnail.ThumbnailService
    import org.mrpaulwoods.instaboot.upload.UploadForm
    import org.springframework.stereotype.Service
    import org.springframework.transaction.annotation.Transactional

    @Slf4j
    @Service
    @Transactional
    class UploadAction {

        private ImageService imageService
        private PostService postService
        //private ThumbnailService thumbnailService

        UploadAction(
                ImageService imageService,
                PostService postService
                //ThumbnailService thumbnailService
        ) {
            this.imageService = imageService
            this.postService = postService
           // this.thumbnailService = thumbnailService
        }

        Post execute(UploadForm uploadForm, User user) {

            execute uploadForm.content.originalFilename,
                    uploadForm.content.contentType,
                    uploadForm.content.bytes,
                    uploadForm.text,
                    user
        }

        Post execute(String name, String contentType, byte[] content, String text, User user) {

            Post post = postService.create(new Post(
                    text: text,
                    user: user
            ))

            Image image = imageService.create(new Image(
                    post: post,
                    name: name,
                    contentType: contentType,
                    content: content,
                    imageType: ImageType.ORIGINAL,
                    user: user
            ))

            // thumbnailService.execute image

            post
        }

    }


configure tomcat to handle 4mb uploads
=============================================================================

### edit application.properties
	spring.http.multipart.max-file-size=4194304



create bootstrap file to load database with dummy data
=============================================================================

	create some dummy posts,images,comments


### create BootStrap.groovy

    package org.mrpaulwoods.instaboot

    import groovy.util.logging.Slf4j
    import org.mrpaulwoods.instaboot.action.UploadAction
    import org.mrpaulwoods.instaboot.comment.Comment
    import org.mrpaulwoods.instaboot.comment.CommentService
    import org.mrpaulwoods.instaboot.post.Post
    import org.mrpaulwoods.instaboot.security.SecurityService
    import org.mrpaulwoods.instaboot.security.authority.Authority
    import org.mrpaulwoods.instaboot.security.authority.AuthorityService
    import org.mrpaulwoods.instaboot.security.user.User
    import org.mrpaulwoods.instaboot.security.user.UserService
    import org.springframework.core.io.ClassPathResource
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
    import org.springframework.stereotype.Service
    import org.springframework.transaction.annotation.Transactional
    import javax.annotation.PostConstruct

    @Slf4j
    @Service
    @Transactional
    class Bootstrap {

        private UploadAction uploadAction
        private CommentService commentService
        private SecurityService securityService

        Bootstrap(
                UploadAction uploadAction,
                CommentService commentService,
                SecurityService securityService
        ) {
            this.uploadAction = uploadAction
            this.commentService = commentService
            this.securityService = securityService
        }

        @PostConstruct
        void init() {

            User user = securityService.register("mr.paul.woods@gmail.com", "11111")

            Post post1 = uploadAction.execute(
                    "all code is guilty until proven innocent",
                    "image/png",
                    new ClassPathResource("01.png").inputStream.bytes,
                    "anonymous quote",
                    user
            )

            commentService.create(new Comment(
                    post: post1,
                    text: "This is the first comment.",
                    user: user
            ))

            commentService.create(new Comment(
                    post: post1,
                    text: "This is the second comment.",
                    user: user
            ))

            Post post2 = uploadAction.execute(
                    "hello world",
                    "image/png",
                    new ClassPathResource("02.png").inputStream.bytes,
                    "when a geek is born",
                    user
            )

            commentService.create(new Comment(
                    post: post2,
                    text: "This is the third comment.",
                    user: user
            ))

            commentService.create(new Comment(
                    post: post2,
                    text: "This is the fourth comment.",
                    user: user
            ))

        }

    }




update home page to show multiple images
=============================================================================

### edit home.HomeController

    @GetMapping
    String index(final Model model) {
        model.addAttribute "posts", postService.list()
        "home/index"
    }


### edit home/index.html

    <h4>Latest Images</h4>

    <div style="display: inline-block; margin: 1em; padding: 1em;" th:each="post : ${posts}">
        <a th:href="@{/post/show/{id}(id=${post.id})}">
            <img src="#" th:src="@{/image/content/{id}(id=${@imageService.fetchThumbnailImage(post).id})}"/>
        </a>
        <div th:text="${post.user.username}"></div>
        <div th:text="${@imageService.fetchThumbnailImage(post).name}"></div>
    </div>


add thumbnail service
=============================================================================

### edit build.gradle

	compile 'net.coobird:thumbnailator:0.4.8'


### update UploadAction to call thumbnailService.execute image



### create thumbnail.ThumbnailService

    package org.mrpaulwoods.instaboot.thumbnail

	import groovy.util.logging.Slf4j
	import net.coobird.thumbnailator.Thumbnails
	import org.mrpaulwoods.instaboot.image.Image
	import org.mrpaulwoods.instaboot.image.ImageService
	import org.mrpaulwoods.instaboot.image.ImageType
	import org.springframework.stereotype.Service
	import org.springframework.transaction.annotation.Transactional

	@Slf4j
	@Service
	@Transactional
	class ThumbnailService {

	    private ImageService imageService

	    ThumbnailService(
	            ImageService imageService
	    ) {
	        this.imageService = imageService
	    }

	    Image execute(Image image) {

	        ByteArrayInputStream bais = new ByteArrayInputStream(image.content)
	        ByteArrayOutputStream baos = new ByteArrayOutputStream()

	        Thumbnails
	                .of(bais)
	                .size(120,120)
	                .toOutputStream(baos)

	        Image image2 = imageService.create(new Image(
	                post: image.post,
	                name: image.name,
	                contentType: image.contentType,
	                content: baos.toByteArray(),
	                imageType: ImageType.THUMBNAIL,
	                user: image.user
	        ))

	        image2
	    }

	}



click on image goes to its show page
==============================================================================

### edit post.PostController

    @GetMapping("/show/{id}")
    @PreAuthorize("permitAll")
    String show(@PathVariable Long id, final Model model) {
        Post post = postService.fetch(id)
        model.addAttribute "post", post
        model.addAttribute "image", imageService.fetchOriginalImage(post)
        model.addAttribute "comments", commentService.findAllByPost(post)
        model.addAttribute "commentForm", new CommentForm(postId: post.id)
        "post/show"
    }



### edit post/show.html

    <!DOCTYPE html>

    <html
            xmlns:layout="http://www.w3.org/1999/xhtml"
            xmlns="http://www.w3.org/1999/xhtml"
            xmlns:th="http://www.thymeleaf.org"
            layout:decorator="instaboot">

    <body>

    <div layout:fragment="body">

        <h2 th:text="${image.name}"></h2>

        <div class="row">
            <div class="col-md-8">
                <img th:src="@{/image/content/{id}(id=${image.id})}"/>
            </div>
            <div class="col-md-4">

                <div th:text="${post.user.username}"></div>
                <div th:text="${post.text}"></div>

                <hr/>

                <div>

                    <form th:action="@{/comment/save/{id}(id=${post.id})}" method="post" th:object="${commentForm}">

                        <div class="form-group">
                            <label>Add Comment</label>
                            <textarea  class="form-control" th:field="*{text}"></textarea>
                        </div>

                        <div class="form-group">
                            <input  class="form-control" type="hidden" th:field="*{postId}"/>
                        </div>

                        <div>
                            <button class="btn btn-primary">Add</button>
                        </div>

                    </form>

                </div>

                <hr/>

                <h4>Comments</h4>

                <div th:each="comment : ${comments}">
                    <div th:text="${comment.user.username}"></div>
                    <div th:text="${comment.text}"></div>
                    <br/>
                </div>

            </div>

        </div>

    </div>

    </body>

    </html>

### create comment.CommentForm


    package org.mrpaulwoods.instaboot.comment

    import groovy.transform.Canonical

    import javax.validation.constraints.NotNull
    import javax.validation.constraints.Size

    @Canonical
    class CommentForm implements Serializable {

        private static final long serialVersionUID = 0

        @NotNull
        Long postId

        @NotNull
        @Size(min = 1, max = 2000)
        String text
    }


### edit comment.CommentController


    @RequestMapping("/save/{postId}")
    @PreAuthorize("hasRole(['ROLE_USER])")
    String save(@PathVariable Long postId, @Valid CommentForm commentForm, BindingResult result, final Model model) {
        Post post = postService.fetch(postId)
        if(result.hasErrors()) {
            model.addAttribute "post", post
            model.addAttribute "image", imageService.fetchOriginalImage(post)
            model.addAttribute "comments", commentService.findAllByPost(post)
            model.addAttribute "commentForm", new CommentForm(postId: post.id)
            "post/show"
        } else {
            commentService.create new Comment(
                    post: post,
                    text: commentForm.text,
                    user: securityService.currentUser)
            "redirect:/post/show/$postId"
        }
    }




update ui
=============================================================================

    add bootstrap
    use thymeleaf decorator and templates


### edit build.gradle

    compile 'org.webjars:jquery:3.2.1'
	compile 'org.webjars:bootstrap:3.3.7-1'



### edit instaboot.html

	<!DOCTYPE html>

	<html lang="en"
	      xmlns:th="http://www.thymeleaf.org"
	      xmlns:layout="http://www.w3.org/1999/xhtml"
	      xmlns="http://www.w3.org/1999/xhtml">

	<head>
	    <meta charset="utf-8"/>
	    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"/>
	    <title>Insta Boot</title>
	    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
	    <link rel="stylesheet" th:href="@{/webjars/bootstrap/3.3.7-1/css/bootstrap.min.css}"/>
	    <link rel="stylesheet" th:href="@{/css/styles.css}"/>

	</head>

	<body>

	<nav class="navbar navbar-default">
	    <div class="container-fluid">
	        <div class="navbar-header">
	            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
	                <span class="sr-only">Toggle navigation</span>
	                <span class="icon-bar"></span>
	                <span class="icon-bar"></span>
	                <span class="icon-bar"></span>
	            </button>
	            <a class="navbar-brand" th:href="@{/}">InstaBoot Images</a>
	        </div>
	        <div id="navbar" class="navbar-collapse collapse">
	            <ul class="nav navbar-nav">
	                <li><a th:href="@{/}">Home</a></li>
	                <li><a th:href="@{/upload}">Upload</a></li>
	            </ul>
	            <ul class="nav navbar-nav navbar-right">
	                <li th:if="${#authentication.name == 'anonymousUser'}"><a th:href="@{/login}">login</a></li>
	                <li th:if="${#authentication.name != 'anonymousUser'}"><a th:href="@{/logout}" th:text="${#authentication.name}">user name</a></li>
	            </ul>
	        </div><!--/.nav-collapse -->
	    </div><!--/.container-fluid -->
	</nav>

	<div class="container-fluid">
	    <div layout:fragment="body"></div>
	</div>

	<script th:src="@{/webjars/jquery/3.2.1/jquery.min.js}"></script>
	<script th:src="@{/webjars/bootstrap/3.3.7-1/js/bootstrap.min.js}"></script>

	</body>

	</html>


### edit home/index.html

	<!DOCTYPE html>

	<html
	        xmlns:layout="http://www.w3.org/1999/xhtml"
	        xmlns="http://www.w3.org/1999/xhtml"
	        xmlns:th="http://www.thymeleaf.org"
	        layout:decorator="instaboot">

	<body>

	<div layout:fragment="body">

	    <div class="row">
	        <div class="col-md-12">
	            <h2 class="text-center">Welcome To InstaBoot</h2>
	        </div>
	    </div>

	    <h4>Latest Images</h4>

	    <div style="display: inline-block; margin: 1em; padding: 1em;" th:each="post : ${posts}">
	        <a th:href="@{/post/show/{id}(id=${post.id})}">
	            <img src="#" th:src="@{/image/content/{id}(id=${@imageService.fetchThumbnailImage(post).id})}"/>
	        </a>
	        <div th:text="${post.user.username}"></div>
	        <div th:text="${@imageService.fetchThumbnailImage(post).name}"></div>
	    </div>

	</div>

	</body>

	</html>


unit tests
=============================================================================

	testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
		exclude module: 'groovy-all'
	}
	testCompile('org.spockframework:spock-spring:1.1-groovy-2.4') {
		exclude module: 'groovy-all'
	}
	testCompile 'cglib:cglib-nodep:3.2.5'
	testCompile 'org.objenesis:objenesis:2.5.1'

jacoco
=============================================================================

    apply plugin: 'jacoco'

    jacoco {
        reportsDir = file("$buildDir/reports/jacoco")
    }

update security
=============================================================================

	compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4')
